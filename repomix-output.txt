This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T01:34:26.168Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
background.js
content.js
manifest.json
popup.html
popup.js
styles.css
tabManager.js

================================================================
Files
================================================================

================
File: background.js
================
// background.js

chrome.commands.onCommand.addListener(function (command) {
	if (command === "toggle-chat-tab-manager") {
		console.log("Command 'toggle-chat-tab-manager' was activated!");
		chrome.action.openPopup();
	}
});

================
File: content.js
================
// Enhanced content script with modularity and programmability in mind
const logger = {
	log: (...args) => console.log("[CONTENT]", ...args),
	error: (...args) => console.error("[CONTENT]", ...args)
};

let isActive = false;
let userSettings = {}; // Placeholder for user settings

// --- 1. Load User Settings and Initial State ---
function loadUserSettings() {
	chrome.storage.local.get(["userSettings", "isActive"], (result) => {
		userSettings = result.userSettings || {
			// Default user settings aligned with popup controls
			typography: {
				fontFamily: "Satoshi",
				fontSize: 16,
				lineHeight: 1.7,
				letterSpacing: 0
			},
			colors: {
				surfacePrimary: "#fdfdfd",
				textPrimary: "#242424",
				accentPrimary: "#5469d4"
			},
			layout: {
				contentWidth: 800,
				borderRadius: 7,
				messageSpacing: 20
			},
			advanced: {
				codeTheme: "dracula",
				animationSpeed: 0.18
			}
		};
		isActive = result.isActive || false;

		logger.log("Settings loaded:", userSettings);
		logger.log("Initial state loaded:", isActive);

		applyActiveState();
		applyStylesFromSettings(); // Apply styles based on loaded settings
	});
}

// --- 2. Apply Active State (CSS Class Toggle) ---
function applyActiveState() {
	document.documentElement.classList.toggle(
		"chat-beautifier-active",
		isActive
	);
}

// --- 3. Apply Styles Based on User Settings ---
function applyStylesFromSettings() {
	logger.log("Applying styles from settings");

	if (!isActive) return; // Only apply styles if active

	// --- Typography ---
	document.documentElement.style.setProperty(
		"--font-family-base",
		`"${userSettings.typography.fontFamily}", -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif`
	);
	document.documentElement.style.setProperty(
		"--type-scale-base",
		userSettings.typography.fontSize / 16
	);
	document.documentElement.style.setProperty(
		"--line-height-base",
		userSettings.typography.lineHeight
	);
	document.documentElement.style.setProperty(
		"--letter-spacing",
		`${userSettings.typography.letterSpacing}em`
	);

	// --- Colors ---
	document.documentElement.style.setProperty(
		"--color-surface-primary",
		userSettings.colors.surfacePrimary
	);
	document.documentElement.style.setProperty(
		"--color-text-primary",
		userSettings.colors.textPrimary
	);
	document.documentElement.style.setProperty(
		"--color-accent-primary",
		userSettings.colors.accentPrimary
	);

	// --- Layout ---
	document.documentElement.style.setProperty(
		"--content-width",
		`${userSettings.layout.contentWidth}px`
	);
	document.documentElement.style.setProperty(
		"--border-radius-md",
		`${userSettings.layout.borderRadius}px`
	);
	document.documentElement.style.setProperty(
		"--space-unit-base",
		`${userSettings.layout.messageSpacing}px`
	);

	// --- Advanced ---
	document.documentElement.style.setProperty(
		"--transition-speed-base",
		`${userSettings.advanced.animationSpeed}s`
	);
	// Code theme would need additional logic to load different syntax highlighting themes

	applyStyles();
}

// --- 4. Message Listener for Toggle and potentially Settings Updates ---
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
	logger.log("Received message:", request);

	if (request.action === "toggle") {
		isActive = !isActive;
		logger.log("Toggling state to:", isActive);
		applyActiveState(); // Toggle CSS class

		saveState();
		applyStylesFromSettings(); // Re-apply styles based on (potentially) new state

		sendResponse({ success: true, newState: isActive });
		return true; // Keep channel open for async response
	} else if (request.action === "updateSettings") {
		// Future: Settings update action
		userSettings = request.settings;
		logger.log("Settings updated via message:", userSettings);
		applyStylesFromSettings(); // Apply new settings immediately
		saveSettings(); // Save updated settings
		sendResponse({ success: true });
		return true;
	}
});

// --- 5. Mutation Observer for Dynamic Content (Keep for now, refine later) ---
const observer = new MutationObserver((mutations) => {
	logger.log("DOM changes detected:", mutations.length);
	if (isActive) applyStylesFromSettings(); // Re-apply styles on DOM changes (important for dynamic chats)
});

observer.observe(document.body, {
	childList: true,
	subtree: true,
	attributes: false,
	characterData: false
});

// --- 6. Dynamic Style Adjustments (Currently Empty - Future Enhancements) ---
function applyStyles() {
	logger.log("Applying/reapplying dynamic styles");
	// Add any dynamic style adjustments here based on userSettings or DOM state
	// Example: Adjusting bubble width based on screen size (if needed)
}

// --- 7. Save State (isActive) ---
function saveState() {
	logger.log("Saving state:", isActive);
	chrome.storage.local.set({ isActive }, () => {
		if (chrome.runtime.lastError) {
			logger.error("Storage error:", chrome.runtime.lastError);
		}
	});
}

// --- 8. Save User Settings --- (Future: Settings Persistence)
function saveSettings() {
	logger.log("Saving user settings:", userSettings);
	chrome.storage.local.set({ userSettings }, () => {
		if (chrome.runtime.lastError) {
			logger.error("Settings storage error:", chrome.runtime.lastError);
		}
	});
}

// --- 9. Initialization ---
loadUserSettings(); // Load settings and apply initial styles

================
File: manifest.json
================
{
	"manifest_version": 3,
	"name": "Chat Beautifier",
	"version": "1.0",
	"permissions": ["storage", "activeTab", "scripting", "tabs"],
	"host_permissions": [
		"*://chat.openai.com/*",
		"*://*.chatgpt.com/*",
		"*://chat.com/*",
		"*://*.deepseek.com/*",
		"*://claude.ai/*",
		"*://perplexity.ai/*"
	],
	"action": {
		"default_popup": "popup.html"
	},
	"background": {
		"service_worker": "background.js"
	},
	"content_scripts": [
		{
			"matches": [
				"*://chat.openai.com/*",
				"*://*.chatgpt.com/*",
				"*://chat.com/*",
				"*://*.deepseek.com/*",
				"*://claude.ai/*",
				"*://perplexity.ai/*"
			],
			"css": ["styles.css"],
			"js": ["content.js"],
			"run_at": "document_end"
		}
	],
	"web_accessible_resources": [
		{
			"resources": ["styles.css", "tabManager.js"],
			"matches": ["<all_urls>"]
		}
	],
	"commands": {
		"toggle-chat-tab-manager": {
			"suggested_key": {
				"default": "Ctrl+Shift+L",
				"mac": "Command+Shift+L"
			},
			"description": "Toggle Chat Tab Manager (Press again to close)"
		}
	}
}

================
File: popup.html
================
<!DOCTYPE html>
<html>
	<head>
		<style>
			body {
				width: 350px;
				padding: 20px;
				font-family: Arial, sans-serif;
			}
			button {
				width: 100%;
				padding: 12px;
				background: #007bff;
				color: white;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				margin-bottom: 15px;
			}

			.setting-group {
				margin-bottom: 20px;
				padding: 15px;
				border: 1px solid #eee;
				border-radius: 6px;
			}

			.setting-label {
				display: block;
				margin-bottom: 8px;
				font-weight: bold;
				color: #333;
			}

			.setting-dropdown,
			.setting-slider,
			.setting-input {
				width: 100%;
				padding: 8px;
				border-radius: 4px;
				border: 1px solid #ccc;
				margin-bottom: 10px;
			}

			.setting-slider {
				margin: 10px 0;
			}

			.color-picker {
				width: 100%;
				height: 40px;
				padding: 0;
				border: 1px solid #ccc;
				border-radius: 4px;
			}

			.setting-tabs {
				display: flex;
				margin-bottom: 15px;
				border-bottom: 1px solid #eee;
			}

			.setting-tab {
				padding: 8px 15px;
				cursor: pointer;
				border-bottom: 2px solid transparent;
			}

			.setting-tab.active {
				border-bottom: 2px solid #007bff;
				color: #007bff;
			}

			.tab-list {
				margin-top: 15px;
				border-top: 1px solid #eee;
				padding-top: 10px;
			}

			.chat-tab {
				display: flex;
				align-items: center;
				padding: 8px;
				margin: 5px 0;
				border-radius: 4px;
				cursor: pointer;
				background: #f8f9fa;
			}

			.chat-tab:hover {
				background: #e9ecef;
			}
		</style>
	</head>
	<body>
		<button id="toggleBtn">Initialize...</button>
		<div
			id="status"
			style="margin-top: 8px; font-size: 0.8em; margin-bottom: 15px"
		></div>

		<div class="new-session">
			<h3>Start New Session</h3>
			<button class="service-btn" data-service="chatgpt">ChatGPT</button>
			<button class="service-btn" data-service="deepseek">
				DeepSeek
			</button>
			<button class="service-btn" data-service="claude">Claude</button>
		</div>

		<!-- Below the toggle button -->
		<div class="tab-list">
			<h3>Active Chat Sessions</h3>
			<div id="chatTabs"></div>
		</div>

		<div class="setting-tabs">
			<div class="setting-tab active">Typography</div>
			<div class="setting-tab">Colors</div>
			<div class="setting-tab">Layout</div>
		</div>

		<div class="setting-group">
			<label class="setting-label">Typography</label>
			<select id="fontFamilyDropdown" class="setting-dropdown">
				<option value="Satoshi">Satoshi</option>
				<option value="Inter">Inter</option>
				<option value="Arial">Arial</option>
				<option value="Helvetica">Helvetica</option>
				<option value="Times New Roman">Times New Roman</option>
				<option value="Georgia">Georgia</option>
				<option value="monospace">Monospace</option>
				<option value="system-ui">System UI</option>
			</select>

			<label class="setting-label">Font Size</label>
			<input
				type="range"
				id="fontSize"
				class="setting-slider"
				min="12"
				max="24"
				value="16"
			/>

			<label class="setting-label">Line Height</label>
			<input
				type="range"
				id="lineHeight"
				class="setting-slider"
				min="1.2"
				max="2"
				step="0.1"
				value="1.7"
			/>

			<label class="setting-label">Letter Spacing</label>
			<input
				type="range"
				id="letterSpacing"
				class="setting-slider"
				min="-0.05"
				max="0.1"
				step="0.01"
				value="0"
			/>
		</div>

		<div class="setting-group">
			<label class="setting-label">Colors</label>
			<label>Primary Surface</label>
			<input
				type="color"
				id="surfaceColor"
				class="color-picker"
				value="#fdfdfd"
			/>

			<label>Text Color</label>
			<input
				type="color"
				id="textColor"
				class="color-picker"
				value="#242424"
			/>

			<label>Accent Color</label>
			<input
				type="color"
				id="accentColor"
				class="color-picker"
				value="#5469d4"
			/>
		</div>

		<div class="setting-group">
			<label class="setting-label">Layout & Spacing</label>
			<label>Content Width</label>
			<input
				type="range"
				id="contentWidth"
				class="setting-slider"
				min="600"
				max="1200"
				step="50"
				value="800"
			/>

			<label>Border Radius</label>
			<input
				type="range"
				id="borderRadius"
				class="setting-slider"
				min="0"
				max="20"
				value="7"
			/>

			<label>Message Spacing</label>
			<input
				type="range"
				id="messageSpacing"
				class="setting-slider"
				min="10"
				max="40"
				value="20"
			/>
		</div>

		<div class="setting-group">
			<label class="setting-label">Advanced</label>
			<label>Code Block Theme</label>
			<select id="codeTheme" class="setting-dropdown">
				<option value="dracula">Dracula</option>
				<option value="github">GitHub</option>
				<option value="monokai">Monokai</option>
			</select>

			<label>Animation Speed</label>
			<input
				type="range"
				id="animationSpeed"
				class="setting-slider"
				min="0.1"
				max="0.5"
				step="0.05"
				value="0.18"
			/>
		</div>
		<script src="tabManager.js"></script>
		<script src="popup.js"></script>
	</body>
</html>

================
File: popup.js
================
// Enhanced popup with logging, status, and basic settings structure
const logger = {
	log: (...args) => console.log("[POPUP]", ...args),
	error: (...args) => console.error("[POPUP]", ...args)
};

document.addEventListener("DOMContentLoaded", initPopup);

// Tab change listeners
chrome.tabs.onCreated.addListener(renderChatTabs);
chrome.tabs.onRemoved.addListener(renderChatTabs);
chrome.tabs.onUpdated.addListener(renderChatTabs);

async function initPopup() {
	const tabManager = new TabManager();
	window.tabManager = tabManager;

	logger.log("Popup initialized");
	try {
		const [tab] = await chrome.tabs.query({
			active: true,
			currentWindow: true
		});
		updateButtonState();
		setupToggleButton(tab.id);
		setupSettingsControls(tab.id);
		await renderChatTabs();
	} catch (error) {
		logger.error("Initialization failed:", error);
		updateStatus("Error initializing");
	}
}

async function renderChatTabs() {
	try {
		const tabs = await tabManager.getChatTabs();
		const container = document.getElementById("chatTabs");

		if (!container) {
			logger.error("Chat tabs container not found");
			return;
		}

		container.innerHTML = tabs
			.map(
				(tab) => `
		<div class="chat-tab" data-tab-id="${tab.id}">
			<img src="${tab.favIconUrl}" width="16" height="16">
			<span style="margin-left: 8px">${tab.title}</span>
		</div>
	`
			)
			.join("");

		container.querySelectorAll(".chat-tab").forEach((tabEl) => {
			tabEl.addEventListener("click", () => {
				tabManager.focusTab(parseInt(tabEl.dataset.tabId));
			});
		});
	} catch (error) {
		logger.error("Error rendering chat tabs:", error);
	}
}

document.querySelectorAll(".service-btn").forEach((btn) => {
	btn.addEventListener("click", async (e) => {
		const service = e.target.dataset.service;
		const serviceConfig = tabManager.chatServices.find(
			(s) => s.id === service
		);

		// Query for any existing tabs matching any of the service URLs
		const existingTabs = await Promise.all(
			serviceConfig.urls.map((url) =>
				chrome.tabs.query({ url: `${url}*` })
			)
		);

		// Flatten array and get first existing tab if any
		const existingTab = existingTabs.flat()[0];

		if (existingTab) {
			await tabManager.focusTab(existingTab.id);
		} else {
			// Use first URL as default if no existing tab
			chrome.tabs.create({ url: serviceConfig.urls[0] });
		}
	});
});

function setupToggleButton(tabId) {
	const toggleBtn = document.getElementById("toggleBtn");

	toggleBtn.addEventListener("click", async () => {
		logger.log("Toggle button clicked");
		try {
			const response = await chrome.tabs.sendMessage(tabId, {
				action: "toggle"
			});
			logger.log("Received response:", response);
			updateButtonState();
		} catch (error) {
			logger.error("Communication error:", error);
			updateStatus("Error: Content script not loaded");
		}
	});
}

function updateButtonState() {
	chrome.storage.local.get(["isActive"], (result) => {
		const isActive = result.isActive || false;
		document.getElementById("toggleBtn").textContent = "Toggle Beautify";
		updateStatus(isActive ? "Active" : "Inactive");
	});
}

function updateStatus(text) {
	document.getElementById("status").textContent = `Status: ${text}`;
}

function setupSettingsControls(tabId) {
	logger.log("Setting up settings controls");

	// Typography settings
	setupFontControls(tabId);
	setupRangeControl("fontSize", "typography", "fontSize", tabId);
	setupRangeControl("lineHeight", "typography", "lineHeight", tabId);
	setupRangeControl("letterSpacing", "typography", "letterSpacing", tabId);

	// Color settings
	setupColorControl("surfaceColor", "colors", "surfacePrimary", tabId);
	setupColorControl("textColor", "colors", "textPrimary", tabId);
	setupColorControl("accentColor", "colors", "accentPrimary", tabId);

	// Layout settings
	setupRangeControl("contentWidth", "layout", "contentWidth", tabId);
	setupRangeControl("borderRadius", "layout", "borderRadius", tabId);
	setupRangeControl("messageSpacing", "layout", "messageSpacing", tabId);

	// Advanced settings
	setupSelectControl("codeTheme", "advanced", "codeTheme", tabId);
	setupRangeControl("animationSpeed", "advanced", "animationSpeed", tabId);

	// Setup tab switching
	setupTabSwitching();
}

function setupTabSwitching() {
	const tabs = document.querySelectorAll(".setting-tab");
	const groups = document.querySelectorAll(".setting-group");

	tabs.forEach((tab, index) => {
		tab.addEventListener("click", () => {
			tabs.forEach((t) => t.classList.remove("active"));
			tab.classList.add("active");

			groups.forEach((group, groupIndex) => {
				if (groupIndex === index) {
					group.style.display = "block";
				} else {
					group.style.display = "none";
				}
			});
		});
	});
}

function setupFontControls(tabId) {
	const fontFamilyDropdown = document.getElementById("fontFamilyDropdown");
	if (fontFamilyDropdown) {
		fontFamilyDropdown.addEventListener("change", (event) => {
			const newFontFamily = event.target.value;
			logger.log("Font Family changed to:", newFontFamily);
			updateSetting("typography", "fontFamily", newFontFamily, tabId);
		});
		loadCurrentFontFamily(fontFamilyDropdown);
	}
}

function setupRangeControl(elementId, module, settingKey, tabId) {
	const control = document.getElementById(elementId);
	if (control) {
		control.addEventListener("input", (event) => {
			const value = parseFloat(event.target.value);
			updateSetting(module, settingKey, value, tabId);
		});
		loadCurrentSetting(control, module, settingKey);
	}
}

function setupColorControl(elementId, module, settingKey, tabId) {
	const control = document.getElementById(elementId);
	if (control) {
		control.addEventListener("input", (event) => {
			updateSetting(module, settingKey, event.target.value, tabId);
		});
		loadCurrentSetting(control, module, settingKey);
	}
}

function setupSelectControl(elementId, module, settingKey, tabId) {
	const control = document.getElementById(elementId);
	if (control) {
		control.addEventListener("change", (event) => {
			updateSetting(module, settingKey, event.target.value, tabId);
		});
		loadCurrentSetting(control, module, settingKey);
	}
}

function loadCurrentFontFamily(dropdown) {
	chrome.storage.local.get(["userSettings"], (result) => {
		const currentSettings = result.userSettings || {};
		const currentFontFamily =
			currentSettings.typography?.fontFamily || "Satoshi";
		dropdown.value = currentFontFamily;
	});
}

function loadCurrentSetting(control, module, settingKey) {
	chrome.storage.local.get(["userSettings"], (result) => {
		const currentSettings = result.userSettings || {};
		const currentValue = currentSettings[module]?.[settingKey];
		if (currentValue !== undefined) {
			control.value = currentValue;
		}
	});
}

async function updateSetting(module, settingKey, settingValue, tabId) {
	logger.log(`Updating setting: ${module}.${settingKey} to ${settingValue}`);
	try {
		const currentSettings = await getSettingsFromStorage();

		if (!currentSettings[module]) {
			currentSettings[module] = {};
		}
		currentSettings[module][settingKey] = settingValue;

		await saveSettingsToStorage(currentSettings);
		await sendMessageToContentScript(tabId, {
			action: "updateSettings",
			settings: currentSettings
		});

		logger.log("Settings updated and sent to content script");
	} catch (error) {
		logger.error("Error updating setting:", error);
		updateStatus("Error: Setting update failed");
	}
}

async function getSettingsFromStorage() {
	return new Promise((resolve) => {
		chrome.storage.local.get(["userSettings"], (result) => {
			resolve(result.userSettings || {});
		});
	});
}

async function saveSettingsToStorage(settings) {
	return new Promise((resolve, reject) => {
		chrome.storage.local.set({ userSettings: settings }, () => {
			if (chrome.runtime.lastError) {
				logger.error("Storage error:", chrome.runtime.lastError);
				reject(chrome.runtime.lastError);
			} else {
				resolve();
			}
		});
	});
}

async function sendMessageToContentScript(tabId, message) {
	return chrome.tabs.sendMessage(tabId, message);
}

================
File: styles.css
================
/* ===== Chat Beautifier: Cognitive Interface Optimization System ===== */

.tab-list {
	margin-top: 15px;
	border-top: 1px solid #eee;
	padding-top: 10px;
}

.chat-tab {
	display: flex;
	align-items: center;
	padding: 8px;
	margin: 5px 0;
	border-radius: 4px;
	cursor: pointer;
	background: #f8f9fa;
}

.chat-tab:hover {
	background: #e9ecef;
}

/* ===== 1. Design System - Core Variables ===== */
.chat-beautifier-active {
	/* --- Typography --- */
	--font-family-base: var(--font-family-base);
	--font-family-code: "Space Mono", "Fira Code", monospace;
	--font-weight-regular: 400;
	--font-weight-bold: 700;
	--line-height-base: var(--line-height-base);
	--type-scale-base: var(--type-scale-base);
	--letter-spacing: var(--letter-spacing);

	/* --- Color Palette --- */
	--color-surface-primary: var(--color-surface-primary);
	--color-surface-secondary: #ffffff;
	--color-text-primary: var(--color-text-primary);
	--color-text-secondary: #5a5a5a;
	--color-accent-primary: var(--color-accent-primary);
	--color-accent-secondary: #7284e0;
	--color-code-bg: #282a36;

	/* --- Spacing & Radius --- */
	--space-unit-base: var(--space-unit-base);
	--border-radius-sm: 4px;
	--border-radius-md: var(--border-radius-md);
	--border-radius-lg: 14px;
	--content-width: var(--content-width);

	/* --- Shadow & Elevation --- */
	--box-shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.06);
	--box-shadow-md: 0 3px 9px rgba(0, 0, 0, 0.09);

	/* --- Animation --- */
	--transition-speed-base: var(--transition-speed-base);
}

/* Dark Mode Overrides (if user prefers dark theme) */
@media (prefers-color-scheme: dark) {
	.chat-beautifier-active {
		--color-surface-primary: #181818;
		--color-surface-secondary: #252525;
		--color-text-primary: #e2e2e2;
		--color-text-secondary: #a8a8a8;
		--color-code-bg: #2d2d2d;
		--box-shadow-md: 0 5px 20px rgba(0, 0, 0, 0.2);
	}
}

/* ===== 2. Core Enhancements - Base Styles ===== */
.chat-beautifier-active {
	font-family: var(--font-family-base) !important;
	letter-spacing: var(--letter-spacing) !important;
	color: var(--color-text-primary) !important;
	background: var(--color-surface-primary) !important;
	font-feature-settings: "kern" 1, "calt" 1, "liga" 1 !important;
	font-optical-sizing: auto !important;
}

/* ===== 3. Typography Module ===== */
.chat-beautifier-active .markdown\:prose,
.chat-beautifier-active .message-content {
	/* Generic message text - adjust selectors as needed */
	font-size: calc(1rem * var(--type-scale-base)) !important;
	line-height: var(--line-height-base) !important;
	color: var(--color-text-primary) !important;

	h1 {
		font-size: calc(1.9rem * var(--type-scale-base)) !important;
	}
	h2 {
		font-size: calc(1.7rem * var(--type-scale-base)) !important;
	}
	h3 {
		font-size: calc(1.5rem * var(--type-scale-base)) !important;
	}
	h4 {
		font-size: calc(1.3rem * var(--type-scale-base)) !important;
	}
	p,
	ul,
	ol {
		margin-bottom: calc(var(--space-unit-base) * 1.3) !important;
	}
}

/* ===== 4. Message Bubbles Module ===== */
.chat-beautifier-active [class*="react-markdown"], /* ChatGPT bubbles - refine selectors */
.chat-beautifier-active [class*="message"],         /* Generic bubbles - refine selectors */
.chat-beautifier-active .ProseMirror p {
	/* DeepSeek bubbles - refine selectors */
	background: var(--color-surface-secondary) !important;
	padding: calc(var(--space-unit-base) * 1.3) !important;
	border-radius: var(--border-radius-lg) !important;
	margin: calc(var(--space-unit-base) * 1.2) 0 !important;
	box-shadow: var(--box-shadow-md) !important;
	border: 1px solid rgba(0, 0, 0, 0.04) !important;
	transition: transform var(--transition-speed-base) ease !important;

	&:hover {
		transform: translateY(-1px) !important;
	}
}

/* Dark Mode Bubble Border Fix */
@media (prefers-color-scheme: dark) {
	.chat-beautifier-active [class*="message"],
	.chat-beautifier-active form {
		/* Input field also in dark mode */
		border-color: rgba(
			255,
			255,
			255,
			0.06
		) !important; /* Dark mode border */
	}
}

/* ===== 5. Premium Code Blocks Module ===== */
.chat-beautifier-active pre {
	background: var(--color-code-bg) !important;
	padding: calc(var(--space-unit-base) * 1.3) !important;
	border-radius: var(--border-radius-md) !important;
	font-family: var(--font-family-code) !important;
	font-size: 0.88em !important;
	position: relative !important;
	overflow-x: auto !important;

	&::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 3px;
		background: linear-gradient(
			90deg,
			var(--color-accent-primary),
			var(--color-accent-secondary)
		) !important;
	}

	code {
		color: #e2e8f0 !important;
		text-shadow: 0 1px rgba(0, 0, 0, 0.25) !important;
	}
}

/* ===== 6. Elegant Input Field Module ===== */
.chat-beautifier-active form {
	max-width: var(--content-width) !important;
	margin: calc(var(--space-unit-base) * 1.8) auto !important;
	background: var(--color-surface-secondary) !important;
	border-radius: var(--border-radius-lg) !important;
	box-shadow: var(--box-shadow-sm) !important;
	padding: calc(var(--space-unit-base) * 0.9) !important;
	transition: all var(--transition-speed-base) ease !important;
	border: 1px solid rgba(0, 0, 0, 0.04) !important;

	&:focus-within {
		box-shadow: var(--box-shadow-md) !important;
		transform: translateY(-1px) !important;
	}
}

/* ===== 7. Dynamic Layout Module ===== */
.chat-beautifier-active .group:has(.flex.items-start), /* ChatGPT main container - refine if needed */
.chat-beautifier-active .ds-chat-container /* DeepSeek main container - refine if needed */ {
	max-width: var(--content-width) !important;
	margin: 0 auto !important;
	padding: calc(var(--space-unit-base) * 1.8) !important;
}

/* ===== 8. Hide Unnecessary Elements Module ===== */
.chat-beautifier-active nav, /* ChatGPT Sidebar - refine if needed */
.chat-beautifier-active [class*="sidebar"], /* Generic sidebar class - adjust for DeepSeek if needed */
.chat-beautifier-active [class*="header"], /* Generic header class - adjust for DeepSeek if needed */
.chat-beautifier-active div[class*="Sidebar__Wrapper"] /* DeepSeek Sidebar - refine if needed */ {
	display: none !important;
}

/* ===== 9. Status Indicator Module ===== */
.chat-beautifier-active::before {
	content: "Reader Mode"; /* Concise status text */
	position: fixed;
	top: 15px;
	right: 15px;
	background: rgba(var(--color-accent-primary-rgb), 0.92);
	color: white;
	padding: 6px 12px;
	border-radius: var(--border-radius-md);
	font-size: 0.8rem;
	font-weight: var(--font-weight-bold);
	letter-spacing: 0.04em;
	text-transform: uppercase;
	backdrop-filter: blur(5px);
	box-shadow: var(--box-shadow-sm);
	z-index: 9999;
	opacity: 0.9;
}

/* ===== 10. Micro-Interactions Module ===== */
.chat-beautifier-active {
	scroll-behavior: smooth !important;

	::-webkit-scrollbar {
		width: 7px;
		background: rgba(0, 0, 0, 0.04);
	}

	::-webkit-scrollbar-thumb {
		background: var(--color-accent-primary);
		border-radius: var(--border-radius-md);
	}
}

/* ===== 11. Performance Optimizations Module ===== */
.chat-beautifier-active * {
	text-rendering: optimizeLegibility !important;
	-webkit-font-smoothing: antialiased !important;
}

================
File: tabManager.js
================
// tabManager.js
class TabManager {
	constructor() {
		this.chatServices = [
			{
				id: "chatgpt",
				name: "ChatGPT",
				urls: [
					"https://chat.openai.com/",
					"https://chatgpt.com/",
					"https://chat.com/"
				]
			},
			{
				id: "deepseek",
				name: "DeepSeek",
				urls: ["https://chat.deepseek.com/"]
			},
			{
				id: "claude",
				name: "Claude",
				urls: ["https://claude.ai/"]
			},
			{
				id: "perplexity",
				name: "Perplexity",
				urls: ["https://perplexity.ai/"]
			},
			{
				id: "aistudio",
				name: "AI Studio",
				urls: ["https://aistudio.google.com/"]
			},
			{
				id: "gemini",
				name: "Gemini",
				urls: ["https://gemini.google.com/"]
			}
		];
	}

	async getChatTabs() {
		const tabs = await chrome.tabs.query({});
		return tabs.filter((tab) =>
			this.chatServices.some((service) =>
				service.urls.some((url) => tab.url?.startsWith(url))
			)
		);
	}

	async focusTab(tabId) {
		await chrome.tabs.update(tabId, { active: true });
		window.close(); // Close popup after focusing
	}
}
